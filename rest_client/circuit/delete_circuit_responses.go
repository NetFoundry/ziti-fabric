// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package circuit

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/openziti/fabric/rest_model"
)

// DeleteCircuitReader is a Reader for the DeleteCircuit structure.
type DeleteCircuitReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteCircuitReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteCircuitOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteCircuitBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteCircuitUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeleteCircuitConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteCircuitOK creates a DeleteCircuitOK with default headers values
func NewDeleteCircuitOK() *DeleteCircuitOK {
	return &DeleteCircuitOK{}
}

/*
DeleteCircuitOK describes a response with status code 200, with default header values.

The delete request was successful and the resource has been removed
*/
type DeleteCircuitOK struct {
	Payload *rest_model.Empty
}

// IsSuccess returns true when this delete circuit o k response has a 2xx status code
func (o *DeleteCircuitOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete circuit o k response has a 3xx status code
func (o *DeleteCircuitOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete circuit o k response has a 4xx status code
func (o *DeleteCircuitOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete circuit o k response has a 5xx status code
func (o *DeleteCircuitOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete circuit o k response a status code equal to that given
func (o *DeleteCircuitOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the delete circuit o k response
func (o *DeleteCircuitOK) Code() int {
	return 200
}

func (o *DeleteCircuitOK) Error() string {
	return fmt.Sprintf("[DELETE /circuits/{id}][%d] deleteCircuitOK  %+v", 200, o.Payload)
}

func (o *DeleteCircuitOK) String() string {
	return fmt.Sprintf("[DELETE /circuits/{id}][%d] deleteCircuitOK  %+v", 200, o.Payload)
}

func (o *DeleteCircuitOK) GetPayload() *rest_model.Empty {
	return o.Payload
}

func (o *DeleteCircuitOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.Empty)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCircuitBadRequest creates a DeleteCircuitBadRequest with default headers values
func NewDeleteCircuitBadRequest() *DeleteCircuitBadRequest {
	return &DeleteCircuitBadRequest{}
}

/*
DeleteCircuitBadRequest describes a response with status code 400, with default header values.

The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information
*/
type DeleteCircuitBadRequest struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this delete circuit bad request response has a 2xx status code
func (o *DeleteCircuitBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete circuit bad request response has a 3xx status code
func (o *DeleteCircuitBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete circuit bad request response has a 4xx status code
func (o *DeleteCircuitBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete circuit bad request response has a 5xx status code
func (o *DeleteCircuitBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete circuit bad request response a status code equal to that given
func (o *DeleteCircuitBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete circuit bad request response
func (o *DeleteCircuitBadRequest) Code() int {
	return 400
}

func (o *DeleteCircuitBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /circuits/{id}][%d] deleteCircuitBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteCircuitBadRequest) String() string {
	return fmt.Sprintf("[DELETE /circuits/{id}][%d] deleteCircuitBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteCircuitBadRequest) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *DeleteCircuitBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCircuitUnauthorized creates a DeleteCircuitUnauthorized with default headers values
func NewDeleteCircuitUnauthorized() *DeleteCircuitUnauthorized {
	return &DeleteCircuitUnauthorized{}
}

/*
DeleteCircuitUnauthorized describes a response with status code 401, with default header values.

The currently supplied session does not have the correct access rights to request this resource
*/
type DeleteCircuitUnauthorized struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this delete circuit unauthorized response has a 2xx status code
func (o *DeleteCircuitUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete circuit unauthorized response has a 3xx status code
func (o *DeleteCircuitUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete circuit unauthorized response has a 4xx status code
func (o *DeleteCircuitUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete circuit unauthorized response has a 5xx status code
func (o *DeleteCircuitUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delete circuit unauthorized response a status code equal to that given
func (o *DeleteCircuitUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the delete circuit unauthorized response
func (o *DeleteCircuitUnauthorized) Code() int {
	return 401
}

func (o *DeleteCircuitUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /circuits/{id}][%d] deleteCircuitUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteCircuitUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /circuits/{id}][%d] deleteCircuitUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteCircuitUnauthorized) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *DeleteCircuitUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCircuitConflict creates a DeleteCircuitConflict with default headers values
func NewDeleteCircuitConflict() *DeleteCircuitConflict {
	return &DeleteCircuitConflict{}
}

/*
DeleteCircuitConflict describes a response with status code 409, with default header values.

The resource requested to be removed/altered cannot be as it is referenced by another object.
*/
type DeleteCircuitConflict struct {
	Payload *rest_model.APIErrorEnvelope
}

// IsSuccess returns true when this delete circuit conflict response has a 2xx status code
func (o *DeleteCircuitConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete circuit conflict response has a 3xx status code
func (o *DeleteCircuitConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete circuit conflict response has a 4xx status code
func (o *DeleteCircuitConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete circuit conflict response has a 5xx status code
func (o *DeleteCircuitConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this delete circuit conflict response a status code equal to that given
func (o *DeleteCircuitConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the delete circuit conflict response
func (o *DeleteCircuitConflict) Code() int {
	return 409
}

func (o *DeleteCircuitConflict) Error() string {
	return fmt.Sprintf("[DELETE /circuits/{id}][%d] deleteCircuitConflict  %+v", 409, o.Payload)
}

func (o *DeleteCircuitConflict) String() string {
	return fmt.Sprintf("[DELETE /circuits/{id}][%d] deleteCircuitConflict  %+v", 409, o.Payload)
}

func (o *DeleteCircuitConflict) GetPayload() *rest_model.APIErrorEnvelope {
	return o.Payload
}

func (o *DeleteCircuitConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
